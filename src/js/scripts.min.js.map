{"version":3,"sources":["es6/script.js"],"names":["ajax","send","settings","xhr","XMLHttpRequest","addEventListener","e","error","errorText","responseText","code","status","success","headers","headerName","console","log","setRequestHeader","open","method","url","timeout","data","res","response","JSON","parse","err","stringify","title","body","userId","Content-type"],"mappings":"AAAA,aAyEA,IACAA,KAkCA,CACAC,KAjCA,SAAAC,GAEA,IAAAC,EAAA,IAAAC,eAaA,GAXAD,EAAAE,iBAAA,QAAA,SAAAC,GACAJ,EAAAK,MAAA,CACAC,UAAAL,EAAAM,aACAC,KAAAP,EAAAQ,WAIAR,EAAAE,iBAAA,OAAA,SAAAC,GACAJ,EAAAU,QAAAT,EAAAM,gBAGAP,EAAAW,QACA,IAAA,IAAAC,KAAAZ,EAAAW,QACAE,QAAAC,IAAAF,GACAX,EAAAc,iBAAAH,EAAAZ,EAAAW,QAAAC,IAIAX,EAAAE,iBAAA,UAAA,SAAAC,MAIAH,EAAAe,KAAAhB,EAAAiB,OAAAjB,EAAAkB,KACAjB,EAAAkB,QAAAnB,EAAAmB,SAAA,IACAlB,EAAAF,KAAAC,EAAAoB,QAWAtB,KAAAC,KAAA,CACAkB,OAAA,MACAC,IAAA,6CACAR,QAAA,SAAAW,GACA,IAAAC,EAAAC,KAAAC,MAAAH,GACAR,QAAAC,IAAAQ,IAEAjB,MAAA,SAAAoB,GACAZ,QAAAC,IAAAW,MAKA3B,KAAAC,KAAA,CACAkB,OAAA,OACAC,IAAA,6CACAE,KAAAG,KAAAG,UAAA,CACAC,MAAA,MACAC,KAAA,MACAC,OAAA,IAEAlB,QAAA,CACAmB,eAAA,mCAEApB,QAAA,SAAAW,GACA,IAAAC,EAAAC,KAAAC,MAAAH,GACAR,QAAAC,IAAAQ,IAEAjB,MAAA,SAAAoB,GACAZ,QAAAC,IAAAW","file":"scripts.min.js","sourcesContent":["'use strict';\n\n//--- ajax (теория) ---//\n/*\nconst\n    xhr = new XMLHttpRequest(); // позволяет управлять запросами\n\n// .open() дает возможность настроить будущий запрос, принимает несколько параметров\n// подробно о методе: https://developer.mozilla.org/ru/docs/Web/API/XMLHttpRequest/open\nxhr.open('GET', 'https://jsonplaceholder.typicode.com/posts');\n\n// .send() - принимает инфо, передаваемую на сервер. В случае с get передавать ничего не надо.\n// https://developer.mozilla.org/ru/docs/Web/API/XMLHttpRequest/send\nxhr.send();\n\n// для получения данных нужно привязаться к событиям на сервере\n\n// xhr.readyState имеет 5 состояний:\n// 0 - изначальное состояние\n// 1 - когда вызвали метод open() с настройками\n// 2 - получены заголовки (headers)\n// 3 - когда загружается тело, пакет данных\n// 4 - запрос завершен успешно. Можно работать с полученными данными.\n\n// полученный ответ всегда хранится в xhr.responseText\n// if (xhr.readyState === 4) {\n//     console.log(xhr.responseText);\n// }\n\n// более короткий и новый способ - через load\nxhr.addEventListener('load', function (e) {\n    console.log(xhr.responseText);\n    // xhr.status - статус код 200, 404\n    // xhr.statusText - хранит в себе текст ответа: 200 - 'ok', 404 - 'not found'\n});\n\n// для обработки ошибок есть событиие 'error'\n// работает только, если сервер вместе с 404 присылает сообщение об ошибке\nxhr.addEventListener('error', function (e) {\n    console.log(xhr.responseText)\n});\n\n// время, которое готовы ждать ответ от сервера, если время ответа истекло,\n// то можно реализовать событие\nxhr.timeout = 1000;\nxhr.addEventListener('timeout', function (e) {\n    console.log(xhr.timeout);\n});\n\n\n// установка заголовков\n// 1й- имя заголовка\n// 2й - значение заголовка\nxhr.setRequestHeader('Content-type', 'application/json');\n\n// xhr.getResponseHeader('Content-type') - метод на получение конкретного заголовка\n// xhr.getAllResponseHeaders() - метод на получение всех заголовков, которые есть в ответе\n/**/\n\n\n\n//--- ajax (практика) ---//\n/**/\n\n// settings = {\n//    method: \"GET\",\n//    url: \"https://...\"\n//    data: \"данные, которые хочу отправить на сервер\"\n//    timeout: 3000\n//    success: принимает функцию, которая должна отработать в случае успешного взаимодействия с сервером\n//    error: функция обработки ошибки\n// }\n\nconst\n    ajax = (function () {\n        \n        function send(settings) {\n\n            const xhr = new XMLHttpRequest();\n\n            xhr.addEventListener('error', function (e) {\n                settings.error({\n                    errorText: xhr.responseText,\n                    code: xhr.status\n                });\n            });\n\n            xhr.addEventListener('load', function (e) {\n                settings.success(xhr.responseText);\n            });\n\n            if (settings.headers) {\n                for (let headerName in settings.headers) {\n                    console.log(headerName);\n                    xhr.setRequestHeader(headerName, settings.headers[headerName]);\n                }\n            }\n\n            xhr.addEventListener('timeout', function (e) {\n                // какие-то действия по таймауту\n            });\n\n            xhr.open(settings.method, settings.url);\n            xhr.timeout = settings.timeout || 10000;\n            xhr.send(settings.data);\n\n        }\n\n        return {\n            send: send\n        }\n\n})();\n\n// получаем все посты (get all posts)\najax.send({\n    method: 'GET',\n    url: 'https://jsonplaceholder.typicode.com/posts',\n    success: function (res) {\n        let response = JSON.parse(res);\n        console.log(response);\n    },\n    error: function (err) {\n        console.log(err);\n    },\n});\n\n// добавляем пост\najax.send({\n    method: 'POST',\n    url: 'https://jsonplaceholder.typicode.com/posts',\n    data: JSON.stringify({\n        title: 'foo',\n        body: 'bar',\n        userId: 1,\n    }),\n    headers: {\n        \"Content-type\": \"application/json; charset=UTF-8\"\n    },\n    success: function (res) {\n        let response = JSON.parse(res);\n        console.log(response);\n    },\n    error: function (err) {\n        console.log(err);\n    },\n});\n/**/"]}